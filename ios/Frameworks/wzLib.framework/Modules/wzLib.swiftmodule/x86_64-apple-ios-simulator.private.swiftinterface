// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name wzLib
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import Foundation
import MapKit
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
@_exported import wzLib
public struct LocationRes : Swift.Codable {
  public var id: Swift.String
  public var asset: Swift.String
  public var location: wzLib.LocationDetail
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LocationDetail : Swift.Codable {
  public var timestamp: Swift.Int64
  public var address: wzLib.AddressInfo?
  public var place: wzLib.PlaceInfo?
  public var position: wzLib.Position
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Address : Swift.Codable {
  public var type: Swift.String
  public var name: Swift.String
  public var code: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AddressInfo : Swift.Codable {
  public var name: Swift.String
  public var context: [wzLib.Address]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Position : Swift.Codable {
  public var point: wzLib.Point
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Point : Swift.Codable {
  public var longitude: Swift.Double
  public var latitude: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlaceInfo : Swift.Codable {
  public var type: Swift.String
  public var name: Swift.String
  public var distance: wzLib.DistanceInfo
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DistanceInfo : Swift.Codable {
  public var line: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GeocodeRes : Swift.Codable {
  public var id: Swift.String
  public var geoPoint: Swift.String
  public var type: Swift.String
  public var name: Swift.String
  public var code: Swift.String
  public var categories: [wzLib.Category]?
  public var address: wzLib.AddressInfo
  public var relevance: Swift.Double
  public var distance: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Category : Swift.Codable {
  public var id: Swift.String
  public var name: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AddressContext : Swift.Codable {
  public var type: Swift.String
  public var name: Swift.String
  public var code: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LocationData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AssetData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol LocationDelegate {
  func onReceivedLocation(wzLocation: wzLib.LocationRes)
  func onLocationError(msg: Swift.String)
  func onReceivedGeocode(result: [wzLib.GeocodeRes])
  func onReceivedPoiSearch(result: [wzLib.GeocodeRes])
}
@objc public class WzClientLocation : ObjectiveC.NSObject {
  public var callDelegate: (any wzLib.LocationDelegate)?
  public var accesskey: Swift.String?
  public var interval: Swift.Double
  public var isLocateOnce: Swift.Bool
  public var isAgree: Swift.Bool
  public init(delegate: (any wzLib.LocationDelegate)? = nil)
  public func initKey(accesskey: Swift.String)
  public func setAgreePrivacy(isAgree: Swift.Bool)
  public func setLocationDelegate(_delegate: any wzLib.LocationDelegate)
  public func startLocation()
  public func stopLocation()
  public func getReverseCode(latitude: Swift.Double, longitude: Swift.Double)
  public func getGeocCode(address: Swift.String, city: Swift.String)
  public func poiKeySearch(name: Swift.String, city_code: Swift.String, city: Swift.String, page_index: Swift.Int32, page_size: Swift.Int32)
  public func poiNearbySearch(keywords: Swift.String, location: Swift.String, radius: Swift.Int32, category: Swift.String, orderby: Swift.String, page_index: Swift.Int32, page_size: Swift.Int32)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LocationController : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class HTMCoorTransform : ObjectiveC.NSObject {
  public static func transformFromWGSToGCJ(_ wgsLoc: CoreLocation.CLLocationCoordinate2D) -> CoreLocation.CLLocationCoordinate2D
  public static func transformFromGCJToBaidu(_ wgsLoc: CoreLocation.CLLocationCoordinate2D) -> CoreLocation.CLLocationCoordinate2D
  public static func transformFromBaiduToGCJ(_ wgsLoc: CoreLocation.CLLocationCoordinate2D) -> CoreLocation.CLLocationCoordinate2D
  public static func transformFromGCJToWGS(_ wgsLoc: CoreLocation.CLLocationCoordinate2D) -> CoreLocation.CLLocationCoordinate2D
  public static func transformFromWGSToBaidu(_ wgsLoc: CoreLocation.CLLocationCoordinate2D) -> CoreLocation.CLLocationCoordinate2D
  public static func transformFromBaiduToWGS(_ wgsLoc: CoreLocation.CLLocationCoordinate2D) -> CoreLocation.CLLocationCoordinate2D
  public static func distanceByPoint(lat1: Swift.Double, lat2: Swift.Double, lng1: Swift.Double, lng2: Swift.Double) -> Swift.Double
  public static func distanceByPoint(point1: CoreLocation.CLLocationCoordinate2D, point2: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
public struct EmptyResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
